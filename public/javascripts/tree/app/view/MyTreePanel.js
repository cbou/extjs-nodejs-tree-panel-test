/*
 * File: app/view/MyTreePanel.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyTreePanel', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.treepanel',

    height: 242,
    width: 233,
    title: 'My Tree Panel',
    store: 'NodeStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {
                rootVisible: false
            },
            tools: [
                {
                    xtype: 'tool',
                    itemId: 'add-tool',
                    type: 'plus',
                    listeners: {
                        click: {
                            fn: me.onToolClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'tool',
                    itemId: 'refresh-tool',
                    type: 'refresh',
                    listeners: {
                        click: {
                            fn: me.onToolClick1,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onToolClick: function(tool, e, options) {
        var parentNode = tool.up('treepanel').current();

        Ext.create('widget.nodewindow', {
            parentNode: parentNode
        }).show();
    },

    onToolClick1: function(tool, e, options) {
        Ext.getStore('NodeStore').load();
    },

    current: function() {
        var selection = this.getSelectionModel().getSelection();

        if (selection.length > 0) {
            return selection[0];
        } else {
            return this.getRootNode();
        }
    }

});